{"version":3,"sources":["components/header/OpenFavouritesButton.tsx","components/header/SearchForm.tsx","components/header/Header.tsx","components/weatherInfo/CurrentWeather.tsx","components/weatherInfo/DetailsHeader.tsx","components/weatherInfo/DetailsItem.tsx","components/weatherInfo/DetailsList.tsx","components/weatherInfo/Graph.tsx","components/weatherInfo/NextWeekItem.tsx","components/weatherInfo/NextWeek.tsx","components/weatherInfo/DetailsContent.tsx","components/weatherInfo/WeatherDetails.tsx","components/weatherInfo/WeatherInfo.tsx","components/footer/Footer.tsx","components/loading/Loading.tsx","components/notification/Notification.tsx","components/favourites/FavouritesHeader.tsx","components/favourites/FavouriteCity.tsx","components/favourites/FavouritesList.tsx","components/favourites/Favourites.tsx","hooks/useOnUpdateEffect.ts","utils/fetchData.ts","utils/models/hourlyWeather.ts","svg/sun.svg","svg/rain.svg","svg/snow.svg","svg/fog.svg","svg/storm.svg","svg/cloud.svg","svg/unknown.svg","utils/icons.ts","utils/models/minimalWeather.ts","utils/models/weather.ts","utils/models/weeklyWeather.ts","utils/weatherFormatter.ts","utils/getData.ts","utils/localStorage.ts","utils/geolocation.ts","App.tsx","index.tsx"],"names":["OpenFavouritesButton","showFavouritesPanel","className","id","onClick","aria-label","SearchForm","changeCity","showNotification","useState","cityName","setCityName","onSubmit","e","preventDefault","trim","type","placeholder","name","autoComplete","value","onChange","target","Header","CurrentWeather","weather","isFavourite","toggleFavourite","tabIndex","data","icon","title","description","aria-hidden","temperature","DetailsHeader","initDetailsContentsMaxWidth","detailsContent","document","getElementById","style","maxHeight","scrollHeight","event","panel","currentTarget","nextElementSibling","classList","toggle","setTimeout","contains","DetailsItem","header","unit","DetailsList","sensedTemperature","humidity","wind","uv","pressure","Graph","dataArray","labels","setLabels","setTemperature","minY","setMinY","maxY","setMaxY","useLayoutEffect","getNext24HoursLabels","Chart","register","ChartDataLabels","defaults","font","size","family","useEffect","newTemperature","map","weatherData","Math","max","apply","min","array","hours","Date","getHours","i","push","datasets","label","fill","above","below","borderColor","tension","options","interaction","intersect","mode","maintainAspectRatio","plugins","tooltip","displayColors","footerFont","callbacks","tooltipItems","date","parsed","x","getDate","getMonth","getFullYear","getMinutes","tooltipItem","y","toFixed","String","fromCharCode","afterLabel","afterBody","footer","datalabels","color","anchor","align","clamp","offset","display","context","dataIndex","formatter","round","legend","scales","grid","drawBorder","drawOnChartArea","drawTicks","ticks","callback","val","index","this","getLabelForValue","maxRotation","autoSkipPadding","getDayName","timestamp","locale","dayName","toLocaleDateString","weekday","tomorrow","setDate","NextWeekItem","maxTemperature","minTemperature","NextWeek","weeklyWeather","DetailsContent","hourlyWeatherArray","weeklyWeatherArray","WeatherDetails","WeatherInfo","Footer","Loading","Notification","message","onClose","notificationRef","useRef","timeoutRef","closeNotification","useCallback","clearTimeout","current","bottom","window","ref","FavouritesHeader","FavouriteCity","city","onDelete","closePanel","favouritesListRef","item","closest","defaultPrevented","weatherDescription","FavouritesList","favourites","length","Favourites","overlayRef","containerRef","right","opacity","scrollY","body","top","position","scrollTo","parseInt","handleKeyDown","code","addEventListener","removeEventListener","useOnUpdateEffect","func","didMount","deps","appId","process","baseUrl","getCoordinates","a","fetch","response","json","result","lat","lon","fetchWeather","fetchMinimalWeather","HourlyWeather","dt","getIcon","iconCode","slice","sun","cloud","rain","storm","snow","fog","unknown","MinimalWeather","Weather","WeeklyWeather","WeatherFormatter","formatWeather","formatWeeklyWeather","daily","formatHourlyWeather","hourly","hourlyWeather","temp","feels_like","wind_speed","uvi","main","hourlyData","Promise","resolve","formattedArray","weeklyData","formatMinimalWeather","getWeatherData","getMinimalWeatherData","minimalWeatherData","saveInitialCityInStorage","localStorage","setItem","getFavouriteCitiesFromLocalStorage","storedCityNames","getItem","storedFavourites","JSON","parse","getFavouriteObjectsFromNames","favouriteObjects","requests","favourite","convertFavouriteCityToObject","all","responses","getCityFromGeolocation","successCallback","errorCallback","error","navigator","geolocation","getCurrentPosition","getCityNameFromCoordinates","coords","latitude","longitude","then","enableHighAccuracy","maximumAge","timeout","App","setWeather","loading","setLoading","setCity","setShowNotification","notificationMessage","setNotificationMessage","favouriteCities","setFavouriteCities","setIsFavourite","showFavouritePanel","setShowFavouritePanel","updateWeather","TypeError","showNotificationHandler","initialCity","favs","isCityInFavourites","some","cityNames","stringify","saveFavouriteCitiesInStorage","changeCityHandler","addFavouriteCityHandler","newFavouriteCity","prev","deleteFavouriteCityHandler","filter","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.40a052f8.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n  showFavouritesPanel: () => void;\n}\n\nconst OpenFavouritesButton: React.FC<Props> = ({ showFavouritesPanel }) => {\n  return (\n    <button\n      className=\"favourites\"\n      id=\"open-favourites-button\"\n      onClick={showFavouritesPanel}\n      aria-label=\"Open favourite cities panel\"\n    >\n      <i className=\"far fa-heart\"></i> <span>Favourites</span>\n    </button>\n  );\n};\n\nexport default OpenFavouritesButton;\n","import React from \"react\";\nimport { useState } from \"react\";\n\ninterface Props {\n  changeCity: (cityName: string) => void;\n  showNotification: (message: string) => void;\n}\n\nconst SearchForm: React.FC<Props> = ({ changeCity, showNotification }) => {\n  const [cityName, setCityName] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (cityName.trim()) {\n      changeCity(cityName);\n    } else {\n      showNotification(\"You have to enter a city name.\");\n    }\n    setCityName(\"\");\n  };\n\n  return (\n    <form id=\"search-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Search for a city...\"\n        name=\"search-input\"\n        id=\"search-input\"\n        autoComplete=\"off\"\n        value={cityName}\n        onChange={(e) => setCityName(e.target.value)}\n      />\n      <button type=\"submit\" id=\"search-button\" aria-label=\"Search\">\n        <i className=\"fas fa-search\"></i>\n      </button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport OpenFavouritesButton from \"./OpenFavouritesButton\";\nimport SearchForm from \"./SearchForm\";\n\ninterface Props {\n  changeCity: (cityName: string) => void;\n  showFavouritesPanel: () => void;\n  showNotification: (message: string) => void;\n}\n\nconst Header: React.FC<Props> = ({\n  changeCity,\n  showFavouritesPanel,\n  showNotification,\n}) => {\n  return (\n    <header>\n      <h1>WeatherApp</h1>\n      <SearchForm changeCity={changeCity} showNotification={showNotification} />\n      <OpenFavouritesButton showFavouritesPanel={showFavouritesPanel} />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { IWeather } from \"../../utils/interfaces/weather\";\n\ninterface Props {\n  weather: IWeather | undefined;\n  isFavourite: boolean;\n  toggleFavourite: () => void;\n}\n\nconst CurrentWeather: React.FC<Props> = ({\n  weather,\n  isFavourite,\n  toggleFavourite,\n}) => {\n  return (\n    <div className=\"current-weather\" tabIndex={0}>\n      <object\n        type=\"image/svg+xml\"\n        id=\"current-icon\"\n        data={weather?.icon}\n        tabIndex={-1}\n        title={`${weather?.description} icon`}\n        aria-hidden=\"true\"\n      ></object>\n      <div className=\"city-info\">\n        <h2 id=\"city-name\">{weather?.cityName}</h2>\n        <p className=\"temperature\">\n          <span id=\"current-temperature\">{weather?.temperature}</span> &deg;C\n        </p>\n        <p id=\"current-description\">{weather?.description}</p>\n      </div>\n      <button\n        className=\"favourites-icon\"\n        id=\"heart-button\"\n        onClick={toggleFavourite}\n        aria-label={`${\n          isFavourite ? \"Remove from favourites\" : \"Add to favourites\"\n        }`}\n      >\n        <i\n          className={`${isFavourite ? \"fas\" : \"far\"} fa-heart ${\n            isFavourite && \"full-heart\"\n          }`}\n        ></i>\n      </button>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\n\nconst DetailsHeader: React.FC = () => {\n  const collapseDetails = (event: React.MouseEvent): void => {\n    const panel = (event.currentTarget! as HTMLElement)\n      .nextElementSibling! as HTMLElement;\n    panel.classList.toggle(\"active\");\n\n    if (!panel.style.maxHeight) {\n      initDetailsContentsMaxWidth();\n    }\n\n    setTimeout(() => {\n      if (!panel.classList.contains(\"active\")) {\n        panel.style.maxHeight = \"0\";\n      } else {\n        panel.style.maxHeight = panel.scrollHeight + \"px\";\n      }\n    });\n  };\n\n  const initDetailsContentsMaxWidth = (): void => {\n    const detailsContent = document.getElementById(\"details-content\")!;\n    detailsContent.style.maxHeight = detailsContent.scrollHeight + \"px\";\n  };\n\n  return (\n    <button id=\"details-header\" onClick={collapseDetails} aria-label=\"Details\">\n      <div className=\"flex-container\">\n        <h3>Details</h3>\n        <span>▼</span>\n      </div>\n    </button>\n  );\n};\n\nexport default DetailsHeader;\n","import React from \"react\";\n\ninterface Props {\n  header: string;\n  value: number | undefined;\n  unit?: string;\n}\n\nconst DetailsItem: React.FC<Props> = ({ header, value, unit }) => {\n  return (\n    <li className=\"details-item\" tabIndex={0}>\n      <h4>{header}</h4>\n      <span>\n        {value}\n        {unit}\n      </span>\n    </li>\n  );\n};\n\nexport default DetailsItem;\n","import React from \"react\";\nimport { IWeather } from \"../../utils/interfaces/weather\";\nimport DetailsItem from \"./DetailsItem\";\n\ninterface Props {\n  weather: IWeather | undefined;\n}\n\nconst DetailsList: React.FC<Props> = ({ weather }) => {\n  return (\n    <ul className=\"details-flex-container\">\n      <DetailsItem\n        header=\"Sensed temperature\"\n        value={weather?.sensedTemperature}\n        unit=\" &deg;C\"\n      />\n      <DetailsItem header=\"Humidity\" value={weather?.humidity} unit=\"%\" />\n      <DetailsItem header=\"Wind\" value={weather?.wind} unit=\" km/h\" />\n      <DetailsItem header=\"UV\" value={weather?.uv} />\n      <DetailsItem header=\"Pressure\" value={weather?.pressure} unit=\" hPa\" />\n    </ul>\n  );\n};\n\nexport default DetailsList;\n","import {\n  CategoryScale,\n  Chart,\n  ChartOptions,\n  ChartTypeRegistry,\n  TooltipItem,\n} from \"chart.js\";\nimport { Context } from \"chartjs-plugin-datalabels\";\nimport React from \"react\";\nimport { useEffect, useLayoutEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport HourlyWeather from \"../../utils/models/hourlyWeather\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\n\ninterface Props {\n  dataArray?: HourlyWeather[];\n}\n\nconst Graph: React.FC<Props> = ({ dataArray }) => {\n  const [labels, setLabels] = useState<string[]>([]);\n  const [temperature, setTemperature] = useState<number[]>([]);\n  const [minY, setMinY] = useState<number>();\n  const [maxY, setMaxY] = useState<number>();\n\n  useLayoutEffect(() => {\n    setLabels(getNext24HoursLabels());\n\n    Chart.register(ChartDataLabels);\n    Chart.defaults.font.size = 14;\n    Chart.defaults.font.family = `\"Ubuntu\", sans-serif`;\n  }, []);\n\n  useEffect(() => {\n    if (dataArray) {\n      const newTemperature = dataArray.map(\n        (weatherData) => weatherData.temperature\n      );\n      setTemperature(newTemperature);\n      setMaxY(Math.max.apply(null, newTemperature) + 2);\n      setMinY(Math.min.apply(null, newTemperature) - 2);\n    }\n  }, [dataArray]);\n\n  const getNext24HoursLabels = (): string[] => {\n    const array = [];\n\n    const now = new Date();\n    let hours = now.getHours();\n\n    for (let i = 0; i < 24; i++) {\n      array.push(hours + \":00\");\n      hours++;\n      if (hours >= 24) {\n        hours = 0;\n      }\n    }\n\n    return array;\n  };\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"Temperature\",\n        data: temperature,\n        fill: {\n          target: \"origin\",\n          above: \"rgba(255,170,99,0.5)\",\n          below: \"rgba(255,170,99,0.5)\",\n        },\n        borderColor: \"rgba(255,170,99,1)\",\n\n        tension: 0.2,\n      },\n    ],\n  };\n\n  const options: ChartOptions = {\n    font: {\n      size: 14,\n      family: `\"Ubuntu\", sans-serif`,\n    },\n    interaction: {\n      intersect: false,\n      mode: \"nearest\",\n    },\n    maintainAspectRatio: false,\n    plugins: {\n      tooltip: {\n        displayColors: false,\n        footerFont: {\n          size: 14,\n        },\n        callbacks: {\n          title: function (\n            tooltipItems: TooltipItem<keyof ChartTypeRegistry>[]\n          ) {\n            const date = new Date(\n              dataArray![tooltipItems[0].parsed.x].date * 1000\n            );\n\n            return `${date.getDate()}.${\n              date.getMonth() + 1 < 10\n                ? \"0\" + (date.getMonth() + 1)\n                : date.getMonth() + 1\n            }.${date.getFullYear()} ${\n              date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()\n            }:${\n              date.getMinutes() < 10\n                ? \"0\" + date.getMinutes()\n                : date.getMinutes()\n            }`;\n          },\n          label: function (tooltipItem: TooltipItem<keyof ChartTypeRegistry>) {\n            return `Temperature: ${tooltipItem.parsed.y.toFixed(\n              1\n            )} ${String.fromCharCode(176)}C`;\n          },\n          afterLabel: function (\n            tooltipItem: TooltipItem<keyof ChartTypeRegistry>\n          ) {\n            return `Humidity: ${dataArray![tooltipItem.parsed.x].humidity}%`;\n          },\n          afterBody: function (\n            tooltipItems: TooltipItem<keyof ChartTypeRegistry>[]\n          ) {\n            return `Wind: ${dataArray![tooltipItems[0].parsed.x].wind} km/h`;\n          },\n          footer: function (\n            tooltipItems: TooltipItem<keyof ChartTypeRegistry>[]\n          ) {\n            return `${dataArray![tooltipItems[0].parsed.x].description}`;\n          },\n        },\n      },\n      datalabels: {\n        color: \"white\",\n        anchor: \"end\",\n        align: \"top\",\n        clamp: true,\n        offset: 0,\n        display: function (context: Context) {\n          return context.dataIndex % 3 === 1;\n        },\n        formatter: function (value: number) {\n          return Math.round(value);\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false,\n          drawBorder: false,\n          drawOnChartArea: false,\n          drawTicks: false,\n          borderColor: \"white\",\n        },\n        ticks: {\n          callback: function (val: string | number, index: number): string {\n            return index % 3 === 1\n              ? (this as CategoryScale).getLabelForValue(+val)\n              : \"\";\n          },\n          color: \"white\",\n          maxRotation: 0,\n          autoSkipPadding: -10,\n        },\n      },\n      y: {\n        max: maxY,\n        min: minY,\n        grid: {\n          display: false,\n          drawBorder: false,\n          drawOnChartArea: false,\n          drawTicks: false,\n          borderColor: \"white\",\n        },\n        ticks: {\n          display: false,\n          color: \"white\",\n        },\n      },\n    },\n  };\n\n  return (\n    <div aria-hidden=\"true\">\n      <h4>Next 24 hours</h4>\n      <div className=\"graph-container\">\n        <Line data={data} options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n","import React from \"react\";\nimport { IWeeklyWeather } from \"../../utils/interfaces/weather\";\n\ninterface Props {\n  weather: IWeeklyWeather;\n}\n\nfunction getDayName(timestamp: number, locale: string) {\n  const date = new Date(timestamp);\n  const dayName = date.toLocaleDateString(locale, { weekday: \"long\" });\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const tomorrowName = tomorrow.toLocaleDateString(locale, { weekday: \"long\" });\n\n  if (dayName === tomorrowName) return \"Tomorrow\";\n  else return dayName;\n}\n\nconst NextWeekItem: React.FC<Props> = ({ weather }) => {\n  return (\n    <li tabIndex={0}>\n      <span className=\"day\">{getDayName(weather.date * 1000, \"en-US\")}</span>\n      <span className=\"icon-cell\">\n        <object\n          type=\"image/svg+xml\"\n          className=\"weather-icon\"\n          data={weather.icon}\n          tabIndex={-1}\n          title={`${weather.description} icon`}\n          aria-hidden=\"true\"\n        ></object>\n      </span>\n      <span className=\"weather-description\">{weather.description}</span>\n      <span\n        className=\"max-temp\"\n        aria-label={`Maximum temperature ${weather.maxTemperature} degrees Celcius`}\n      >\n        {weather.maxTemperature} &deg;C\n      </span>\n      <span\n        className=\"min-temp\"\n        aria-label={`Minimum temperature ${weather.minTemperature} degrees Celcius`}\n      >\n        {weather.minTemperature} &deg;C\n      </span>\n    </li>\n  );\n};\n\nexport default NextWeekItem;\n","import React from \"react\";\nimport { IWeeklyWeather } from \"../../utils/interfaces/weather\";\nimport NextWeekItem from \"./NextWeekItem\";\n\ninterface Props {\n  weeklyWeather?: IWeeklyWeather[];\n}\n\nconst NextWeek: React.FC<Props> = ({ weeklyWeather }) => {\n  return (\n    <div className=\"next-week\">\n      <h4 tabIndex={0}>Next week</h4>\n      <ul className=\"next-week-list\">\n        {weeklyWeather?.map((weather) => (\n          <NextWeekItem key={weather.date} weather={weather} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default NextWeek;\n","import React from \"react\";\nimport { IWeather } from \"../../utils/interfaces/weather\";\nimport DetailsList from \"./DetailsList\";\nimport Graph from \"./Graph\";\nimport NextWeek from \"./NextWeek\";\n\ninterface Props {\n  weather: IWeather | undefined;\n}\n\nconst DetailsContent: React.FC<Props> = ({ weather }) => {\n  return (\n    <div id=\"details-content\" className=\"active\">\n      <hr />\n      <DetailsList weather={weather} />\n      <Graph dataArray={weather?.hourlyWeatherArray} />\n      <NextWeek weeklyWeather={weather?.weeklyWeatherArray} />\n    </div>\n  );\n};\n\nexport default DetailsContent;\n","import React from \"react\";\nimport { IWeather } from \"../../utils/interfaces/weather\";\nimport DetailsHeader from \"./DetailsHeader\";\nimport DetailsContent from \"./DetailsContent\";\n\ninterface Props {\n  weather: IWeather | undefined;\n}\n\nconst WeatherDetails: React.FC<Props> = ({ weather }) => {\n  return (\n    <div className=\"details\">\n      <DetailsHeader />\n      <DetailsContent weather={weather} />\n    </div>\n  );\n};\n\nexport default WeatherDetails;\n","import React from \"react\";\nimport { IWeather } from \"../../utils/interfaces/weather\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport WeatherDetails from \"./WeatherDetails\";\n\ninterface Props {\n  weather: IWeather | undefined;\n  isFavourite: boolean;\n  toggleFavourite: () => void;\n}\n\nconst WeatherInfo: React.FC<Props> = ({\n  weather,\n  isFavourite,\n  toggleFavourite,\n}) => {\n  return (\n    <main>\n      <CurrentWeather\n        weather={weather}\n        isFavourite={isFavourite}\n        toggleFavourite={toggleFavourite}\n      />\n      <WeatherDetails weather={weather} />\n    </main>\n  );\n};\n\nexport default WeatherInfo;\n","import React from \"react\";\n\nconst Footer: React.FC = () => {\n  return <footer>&copy; 2021 Kacper Budny</footer>;\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst Loading: React.FC = () => {\n  return (\n    <div id=\"loading-overlay\">\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useCallback, useEffect, useRef } from \"react\";\n\ninterface Props {\n  message: string;\n  onClose: () => void;\n}\n\nconst Notification: React.FC<Props> = ({ message, onClose }) => {\n  const notificationRef = useRef<HTMLDivElement>(null);\n  const timeoutRef = useRef<number>();\n\n  const closeNotification = useCallback(() => {\n    clearTimeout(timeoutRef.current);\n    notificationRef.current!.style.bottom = \"-100px\";\n    setTimeout(() => {\n      onClose();\n    }, 500);\n  }, [onClose]);\n\n  useEffect(() => {\n    const showNotification = () => {\n      setTimeout(() => {\n        notificationRef.current!.style.bottom = \"0px\";\n      }, 0);\n\n      timeoutRef.current = window.setTimeout(() => {\n        closeNotification();\n      }, 5000);\n    };\n\n    showNotification();\n\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, [closeNotification]);\n\n  return (\n    <>\n      <div className=\"notification\" ref={notificationRef}>\n        <h6>Oops!</h6>\n        <p>{message}</p>\n        <button className=\"close-button\" onClick={closeNotification}>\n          X\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Notification;\n","import React from \"react\";\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst FavouritesHeader: React.FC<Props> = ({ onClose }) => {\n  return (\n    <div className=\"favourites-header\">\n      <h3 tabIndex={0}>Favourite cities</h3>\n      <button\n        id=\"close-favourites\"\n        onClick={onClose}\n        tabIndex={0}\n        aria-label=\"Close the panel\"\n      >\n        <i className=\"fas fa-times\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default FavouritesHeader;\n","import React from \"react\";\nimport { useRef } from \"react\";\nimport { IFavouriteObject } from \"../../utils/interfaces/favouriteObject\";\n\ninterface Props {\n  city: IFavouriteObject;\n  onDelete: (cityName: string) => void;\n  changeCity: (cityName: string) => void;\n  closePanel: () => void;\n}\n\nconst FavouriteCity: React.FC<Props> = ({\n  city,\n  onDelete,\n  changeCity,\n  closePanel,\n}) => {\n  const favouritesListRef = useRef<HTMLLIElement>(null);\n\n  const handleClick = (event: React.MouseEvent) => {\n    const item = (event.target as HTMLElement).closest(\".favourite-item\");\n    if (!item) return;\n    if (!favouritesListRef.current!.contains(item)) return;\n    if (event.defaultPrevented) return;\n\n    changeCity(city.cityName);\n    closePanel();\n  };\n\n  return (\n    <li\n      className=\"favourite-item\"\n      onClick={handleClick}\n      ref={favouritesListRef}\n      tabIndex={0}\n    >\n      <div className=\"flex-group-left\">\n        <object\n          type=\"image/svg+xml\"\n          className=\"icon\"\n          data={city.icon}\n          tabIndex={-1}\n        ></object>\n        <div className=\"city-info\" tabIndex={0}>\n          <h4>{city.cityName}</h4>\n          <p>{city.temperature} &deg;C</p>\n          <p className=\"description\">{city.weatherDescription}</p>\n        </div>\n      </div>\n      <button\n        className=\"remove-button\"\n        onClick={(event: React.MouseEvent) => {\n          event.preventDefault();\n          onDelete(city.cityName);\n        }}\n        tabIndex={0}\n        aria-label=\"Remove from\"\n      >\n        <i className=\"far fa-trash-alt\"></i>\n      </button>\n    </li>\n  );\n};\n\nexport default FavouriteCity;\n","import React from \"react\";\nimport FavouriteCity from \"./FavouriteCity\";\nimport { IFavouriteObject } from \"../../utils/interfaces/favouriteObject\";\n\ninterface Props {\n  favourites: IFavouriteObject[];\n  onDelete: (cityName: string) => void;\n  changeCity: (cityName: string) => void;\n  closePanel: () => void;\n}\n\nconst FavouritesList: React.FC<Props> = ({\n  favourites,\n  onDelete,\n  changeCity,\n  closePanel,\n}) => {\n  return (\n    <>\n      {favourites.length > 0 ? (\n        <ul id=\"favourites-list\">\n          {favourites.map((city) => (\n            <FavouriteCity\n              key={city.cityName}\n              city={city}\n              onDelete={onDelete}\n              changeCity={changeCity}\n              closePanel={closePanel}\n            />\n          ))}\n        </ul>\n      ) : (\n        <p>Your list of favourites is empty.</p>\n      )}\n    </>\n  );\n};\n\nexport default FavouritesList;\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport { IFavouriteObject } from \"../../utils/interfaces/favouriteObject\";\nimport FavouritesHeader from \"./FavouritesHeader\";\nimport FavouritesList from \"./FavouritesList\";\nimport FocusTrap from \"focus-trap-react\";\n\ninterface Props {\n  onClose: () => void;\n  favourites: IFavouriteObject[];\n  onDelete: (cityName: string) => void;\n  changeCity: (cityName: string) => void;\n}\n\nconst Favourites: React.FC<Props> = ({\n  onClose,\n  favourites,\n  onDelete,\n  changeCity,\n}) => {\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const closePanel = useCallback(() => {\n    setTimeout(() => {\n      containerRef.current!.style.right = \"calc(-100% - 100px)\";\n      overlayRef.current!.style.opacity = \"0.0\";\n    }, 0);\n\n    setTimeout(() => {\n      onClose();\n      const scrollY = document.body.style.top;\n      document.body.style.position = \"\";\n      document.body.style.top = \"\";\n      window.scrollTo(0, parseInt(scrollY || \"0\") * -1);\n    }, 500);\n  }, [onClose]);\n\n  useEffect(() => {\n    document.body.style.top = `-${window.scrollY}px`;\n    document.body.style.position = \"fixed\";\n\n    setTimeout(() => {\n      overlayRef.current!.style.opacity = \"1.0\";\n      containerRef.current!.style.right = \"0px\";\n    }, 0);\n\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if (event.code === \"Escape\") {\n        closePanel();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown, false);\n    };\n  }, [closePanel]);\n\n  return (\n    <>\n      <FocusTrap>\n        <div>\n          <div id=\"dark-overlay\" ref={overlayRef} onClick={closePanel}></div>\n          <div id=\"favourites-container\" ref={containerRef}>\n            <FavouritesHeader onClose={closePanel} />\n            <FavouritesList\n              favourites={favourites}\n              onDelete={onDelete}\n              changeCity={changeCity}\n              closePanel={closePanel}\n            />\n          </div>\n        </div>\n      </FocusTrap>\n    </>\n  );\n};\n\nexport default Favourites;\n","import { useEffect, useRef } from \"react\";\n\nconst useOnUpdateEffect = (func: () => void, ...deps: any[]) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n  }, [deps, func]);\n};\n\nexport default useOnUpdateEffect;\n","import { IFetchedData, IFetchedMinimalData } from \"./interfaces/fetchedData\";\nimport { ICoordinates } from \"./interfaces/coordinates\";\n\nconst appId = process.env.REACT_APP_API_KEY;\nconst baseUrl = \"https://api.openweathermap.org\";\n\nexport async function getCoordinates(cityName: string): Promise<ICoordinates> {\n  const response = await fetch(\n    `${baseUrl}/geo/1.0/direct?q=${cityName}&appid=${appId}`\n  );\n  const result = await response.json();\n  return { lat: result[0].lat, lon: result[0].lon };\n}\n\nexport async function getCityNameFromCoordinates({\n  lat,\n  lon,\n}: ICoordinates): Promise<string> {\n  const response = await fetch(\n    `${baseUrl}/geo/1.0/reverse?lat=${lat}&lon=${lon}&appid=${appId}`\n  );\n  const result = await response.json();\n  return result[0].name;\n}\n\nexport async function fetchWeather(\n  lat: number,\n  lon: number\n): Promise<IFetchedData> {\n  const response = await fetch(\n    `${baseUrl}/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=${appId}&units=metric`\n  );\n  const result = await response.json();\n\n  return result;\n}\n\nexport async function fetchMinimalWeather(\n  lat: number,\n  lon: number\n): Promise<IFetchedMinimalData> {\n  const response = await fetch(\n    `${baseUrl}/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,daily,hourly,alerts&appid=${appId}&units=metric`\n  );\n  const result = await response.json();\n\n  return result;\n}\n","import { IHourlyWeather } from \"../interfaces/weather\";\n\ninterface IHourlyWeatherArguments {\n  temperature: number;\n  dt: number;\n  wind: number;\n  humidity: number;\n  description: string;\n}\n\nexport default class HourlyWeather implements IHourlyWeather {\n  temperature: number;\n  date: number;\n  wind: number;\n  humidity: number;\n  description: string;\n\n  constructor({\n    temperature,\n    wind,\n    humidity,\n    description,\n    dt,\n  }: IHourlyWeatherArguments) {\n    this.temperature = temperature;\n    this.date = dt;\n    this.wind = wind;\n    this.humidity = humidity;\n    this.description = description;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/sun.2a54c9b1.svg\";","export default __webpack_public_path__ + \"static/media/rain.42fd10f7.svg\";","export default __webpack_public_path__ + \"static/media/snow.c861e27d.svg\";","export default __webpack_public_path__ + \"static/media/fog.abd7c205.svg\";","export default __webpack_public_path__ + \"static/media/storm.c223c679.svg\";","export default __webpack_public_path__ + \"static/media/cloud.c836b080.svg\";","export default __webpack_public_path__ + \"static/media/unknown.ebf6b6fe.svg\";","import sun from \"../svg/sun.svg\";\nimport rain from \"../svg/rain.svg\";\nimport snow from \"../svg/snow.svg\";\nimport fog from \"../svg/fog.svg\";\nimport storm from \"../svg/storm.svg\";\nimport cloud from \"../svg/cloud.svg\";\nimport unknown from \"../svg/unknown.svg\";\n\nexport function getIcon(iconCode: string): string {\n  iconCode = iconCode.slice(0, 2);\n\n  switch (iconCode) {\n    case \"01\":\n      return sun;\n    case \"02\":\n    case \"03\":\n    case \"04\":\n      return cloud;\n    case \"09\":\n    case \"10\":\n      return rain;\n    case \"11\":\n      return storm;\n    case \"13\":\n      return snow;\n    case \"50\":\n      return fog;\n    default:\n      return unknown;\n  }\n}\n","import { IMinimalWeather } from \"../interfaces/weather\";\nimport { getIcon } from \"../icons\";\n\ninterface IMinimalWeatherArguments {\n  cityName: string;\n  temperature: number;\n  description: string;\n  iconCode: string;\n}\n\nexport default class MinimalWeather implements IMinimalWeather {\n  cityName: string;\n  temperature: number;\n  description: string;\n  icon: string;\n\n  constructor({\n    cityName,\n    temperature,\n    description,\n    iconCode,\n  }: IMinimalWeatherArguments) {\n    this.cityName = cityName;\n    this.temperature = Math.round(temperature);\n    this.description = description;\n    this.icon = getIcon(iconCode);\n  }\n}\n","import { IWeather } from \"../interfaces/weather\";\nimport HourlyWeather from \"./hourlyWeather\";\nimport MinimalWeather from \"./minimalWeather\";\nimport WeeklyWeather from \"./weeklyWeather\";\n\ninterface IWeatherArguments {\n  cityName: string;\n  temperature: number;\n  sensedTemperature: number;\n  humidity: number;\n  wind: number;\n  pressure: number;\n  uv: number;\n  description: string;\n  iconCode: string;\n  weeklyWeatherArray: WeeklyWeather[];\n  hourlyWeatherArray: HourlyWeather[];\n}\n\nexport default class Weather extends MinimalWeather implements IWeather {\n  sensedTemperature: number;\n  humidity: number;\n  wind: number;\n  pressure: number;\n  uv: number;\n  weeklyWeatherArray: WeeklyWeather[];\n  hourlyWeatherArray: HourlyWeather[];\n\n  constructor({\n    cityName,\n    temperature,\n    sensedTemperature,\n    humidity,\n    wind,\n    pressure,\n    uv,\n    description,\n    iconCode,\n    weeklyWeatherArray,\n    hourlyWeatherArray,\n  }: IWeatherArguments) {\n    super({ cityName, temperature, description, iconCode });\n    this.sensedTemperature = Math.round(sensedTemperature);\n    this.humidity = humidity;\n    this.wind = wind;\n    this.pressure = pressure;\n    this.uv = uv;\n    this.weeklyWeatherArray = weeklyWeatherArray;\n    this.hourlyWeatherArray = hourlyWeatherArray;\n  }\n}\n","import { IWeeklyWeather } from \"../interfaces/weather\";\nimport { getIcon } from \"../icons\";\n\ninterface IWeeklyWeatherArguments {\n  minTemperature: number;\n  maxTemperature: number;\n  description: string;\n  iconCode: string;\n  date: number;\n}\n\nexport default class WeeklyWeather implements IWeeklyWeather {\n  minTemperature: number;\n  maxTemperature: number;\n  description: string;\n  icon: string;\n  date: number;\n\n  constructor({\n    minTemperature,\n    maxTemperature,\n    description,\n    iconCode,\n    date,\n  }: IWeeklyWeatherArguments) {\n    this.minTemperature = Math.round(minTemperature);\n    this.maxTemperature = Math.round(maxTemperature);\n    this.description = description;\n    this.icon = getIcon(iconCode);\n    this.date = date;\n  }\n}\n","import {\n  IFetchedData,\n  IFetchedHourlyData,\n  IFetchedMinimalData,\n  IFetchedWeeklyData,\n} from \"./interfaces/fetchedData\";\nimport HourlyWeather from \"./models/hourlyWeather\";\nimport MinimalWeather from \"./models/minimalWeather\";\nimport Weather from \"./models/weather\";\nimport WeeklyWeather from \"./models/weeklyWeather\";\n\nexport default abstract class WeatherFormatter {\n  static formatWeather = async (\n    result: IFetchedData,\n    cityName: string\n  ): Promise<Weather> => {\n    const weeklyWeather = await WeatherFormatter.formatWeeklyWeather(\n      result.daily\n    );\n    const hourlyWeather = await WeatherFormatter.formatHourlyWeather(\n      result.hourly\n    );\n\n    return new Weather({\n      cityName,\n      temperature: result.current.temp,\n      sensedTemperature: result.current.feels_like,\n      humidity: result.current.humidity,\n      wind: result.current.wind_speed,\n      pressure: result.current.pressure,\n      uv: result.current.uvi,\n      description: result.current.weather[0].main,\n      iconCode: result.current.weather[0].icon,\n      weeklyWeatherArray: weeklyWeather,\n      hourlyWeatherArray: hourlyWeather,\n    });\n  };\n\n  static formatHourlyWeather = async (\n    hourlyData: IFetchedHourlyData[]\n  ): Promise<HourlyWeather[]> => {\n    return new Promise((resolve) => {\n      const formattedArray = [];\n\n      for (let i = 0; i < 24; i++) {\n        formattedArray.push(\n          new HourlyWeather({\n            temperature: hourlyData[i].temp,\n            wind: hourlyData[i].wind_speed,\n            description: hourlyData[i].weather[0].main,\n            humidity: hourlyData[i].humidity,\n            dt: hourlyData[i].dt,\n          })\n        );\n      }\n\n      resolve(formattedArray);\n    });\n  };\n\n  static formatWeeklyWeather = async (\n    weeklyData: IFetchedWeeklyData[]\n  ): Promise<WeeklyWeather[]> => {\n    return new Promise((resolve) => {\n      const formattedArray = [];\n\n      for (let i = 1; i < 8; i++) {\n        formattedArray.push(\n          new WeeklyWeather({\n            minTemperature: weeklyData[i].temp.min,\n            maxTemperature: weeklyData[i].temp.max,\n            description: weeklyData[i].weather[0].main,\n            iconCode: weeklyData[i].weather[0].icon,\n            date: weeklyData[i].dt,\n          })\n        );\n      }\n\n      resolve(formattedArray);\n    });\n  };\n\n  static formatMinimalWeather = async (\n    result: IFetchedMinimalData,\n    cityName: string\n  ): Promise<MinimalWeather> => {\n    return new MinimalWeather({\n      cityName,\n      temperature: result.current.temp,\n      description: result.current.weather[0].main,\n      iconCode: result.current.weather[0].icon,\n    });\n  };\n}\n","import { fetchMinimalWeather, fetchWeather, getCoordinates } from \"./fetchData\";\nimport { IWeather } from \"./interfaces/weather\";\nimport MinimalWeather from \"./models/minimalWeather\";\nimport WeatherFormatter from \"./weatherFormatter\";\n\nexport const getWeatherData = async (cityName: string): Promise<IWeather> => {\n  const { lat, lon } = await getCoordinates(cityName);\n  const result = await fetchWeather(lat, lon);\n  const weatherData = await WeatherFormatter.formatWeather(result, cityName);\n\n  return weatherData;\n};\n\nexport const getMinimalWeatherData = async (\n  cityName: string\n): Promise<MinimalWeather> => {\n  const { lat, lon } = await getCoordinates(cityName);\n  const result = await fetchMinimalWeather(lat, lon);\n  const minimalWeatherData = await WeatherFormatter.formatMinimalWeather(\n    result,\n    cityName\n  );\n\n  return minimalWeatherData;\n};\n","import { getMinimalWeatherData } from \"./getData\";\nimport { IFavouriteObject } from \"./interfaces/favouriteObject\";\n\nexport const saveInitialCityInStorage = (cityName: string) => {\n  localStorage.setItem(\"initialCity\", cityName);\n};\n\nexport const saveFavouriteCitiesInStorage = (\n  favouriteCities: IFavouriteObject[]\n): void => {\n  const cityNames = favouriteCities.map((city) => city.cityName);\n  localStorage.setItem(\"cities\", JSON.stringify(cityNames));\n};\n\nexport const getFavouriteCitiesFromLocalStorage = async (\n  callback: (favs: IFavouriteObject[]) => void\n): Promise<void> => {\n  const storedCityNames = localStorage.getItem(\"cities\");\n\n  if (storedCityNames) {\n    const storedFavourites = JSON.parse(storedCityNames);\n\n    const favouriteObjects = await getFavouriteObjectsFromNames(\n      storedFavourites\n    );\n\n    callback(favouriteObjects);\n  }\n};\n\nconst getFavouriteObjectsFromNames = async (\n  storedFavourites: string[]\n): Promise<IFavouriteObject[]> => {\n  const requests = storedFavourites.map((favourite: string) =>\n    convertFavouriteCityToObject(favourite)\n  );\n\n  const responses: IFavouriteObject[] = await Promise.all(requests);\n\n  return responses;\n};\n\nconst convertFavouriteCityToObject = async (\n  cityName: string\n): Promise<IFavouriteObject> => {\n  const result = await getMinimalWeatherData(cityName);\n  return {\n    icon: result.icon,\n    cityName: result.cityName,\n    weatherDescription: result.description,\n    temperature: result.temperature,\n  };\n};\n","import { getCityNameFromCoordinates } from \"./fetchData\";\n\nexport const getCityFromGeolocation = (\n  successCallback: (cityName: string) => void,\n  errorCallback: () => void\n): void => {\n  const success = (position: {\n    coords: { latitude: number; longitude: number };\n  }) => {\n    const coordsObj = {\n      lat: position.coords.latitude.toFixed(1),\n      lon: position.coords.longitude.toFixed(1),\n    };\n\n    getCityNameFromCoordinates({\n      lat: +coordsObj.lat,\n      lon: +coordsObj.lon,\n    }).then((cityName) => {\n      successCallback(cityName);\n    });\n  };\n\n  const error = () => {\n    errorCallback();\n  };\n\n  const options = {\n    enableHighAccuracy: false,\n    maximumAge: 0,\n    timeout: 27000,\n  };\n\n  if (!navigator.geolocation) {\n    error();\n  } else {\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport Header from \"./components/header/Header\";\nimport WeatherInfo from \"./components/weatherInfo/WeatherInfo\";\nimport Footer from \"./components/footer/Footer\";\nimport { IWeather } from \"./utils/interfaces/weather\";\nimport Loading from \"./components/loading/Loading\";\nimport Notification from \"./components/notification/Notification\";\nimport { IFavouriteObject } from \"./utils/interfaces/favouriteObject\";\nimport Favourites from \"./components/favourites/Favourites\";\nimport useOnUpdateEffect from \"./hooks/useOnUpdateEffect\";\nimport { getWeatherData } from \"./utils/getData\";\nimport {\n  getFavouriteCitiesFromLocalStorage,\n  saveFavouriteCitiesInStorage,\n  saveInitialCityInStorage,\n} from \"./utils/localStorage\";\nimport { getCityFromGeolocation } from \"./utils/geolocation\";\n\nconst App: React.FC = () => {\n  const [weather, setWeather] = useState<IWeather>();\n  const [loading, setLoading] = useState(true);\n  const [city, setCity] = useState(\"\");\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [favouriteCities, setFavouriteCities] = useState<IFavouriteObject[]>(\n    []\n  );\n  const [isFavourite, setIsFavourite] = useState(false);\n  const [showFavouritePanel, setShowFavouritePanel] = useState(false);\n\n  useEffect(() => {\n    const updateWeather = async (cityName: string): Promise<void> => {\n      try {\n        setLoading(true);\n        const result: IWeather = await getWeatherData(cityName);\n        setWeather(result);\n        saveInitialCityInStorage(cityName);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          showNotificationHandler(\"Unknown or incorrect city name.\");\n        } else {\n          showNotificationHandler((error as Error).message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (city.length < 1) return;\n\n    updateWeather(city);\n  }, [city]);\n\n  useEffect(() => {\n    const initialCity = localStorage.getItem(\"initialCity\");\n\n    if (!initialCity) {\n      getCityFromGeolocation(\n        (cityName) => {\n          setCity(cityName);\n        },\n        () => {\n          showNotificationHandler(\n            \"Could not get your location, please enter your city in the search bar.\"\n          );\n          setCity(\"London\");\n        }\n      );\n    } else {\n      setCity(initialCity);\n    }\n\n    getFavouriteCitiesFromLocalStorage((favs) => {\n      setFavouriteCities(favs);\n    });\n  }, []);\n\n  const isCityInFavourites = useCallback(\n    (cityName: string): boolean => {\n      return favouriteCities.some((city) => city.cityName == cityName);\n    },\n    [favouriteCities]\n  );\n\n  useOnUpdateEffect(() => {\n    setIsFavourite(isCityInFavourites(city));\n    saveFavouriteCitiesInStorage(favouriteCities);\n  }, [city, isCityInFavourites]);\n\n  const changeCityHandler = (cityName: string) => {\n    setCity(cityName);\n  };\n\n  const closeNotificationHandler = () => {\n    setShowNotification(false);\n    setNotificationMessage(\"\");\n  };\n\n  const showNotificationHandler = (message: string) => {\n    setShowNotification(true);\n    setNotificationMessage(message);\n  };\n\n  const toggleFavouriteHandler = () => {\n    if (isCityInFavourites(city)) {\n      deleteFavouriteCityHandler(city);\n    } else {\n      addFavouriteCityHandler(weather!);\n    }\n  };\n\n  const closeFavouritesPanelHandler = () => {\n    setShowFavouritePanel(false);\n  };\n\n  const showFavouritesPanelHandler = () => {\n    setShowFavouritePanel(true);\n  };\n\n  const addFavouriteCityHandler = (weather: IWeather) => {\n    if (favouriteCities.length >= 5) {\n      showNotificationHandler(\"You can have maximum of 5 favourite cities.\");\n      return;\n    }\n\n    const newFavouriteCity = {\n      cityName: weather.cityName,\n      icon: weather.icon,\n      weatherDescription: weather.description,\n      temperature: weather.temperature,\n    };\n\n    setFavouriteCities((prev) => [...prev, newFavouriteCity]);\n  };\n\n  const deleteFavouriteCityHandler = (cityName: string) => {\n    setFavouriteCities((prev) =>\n      prev.filter((city) => city.cityName !== cityName)\n    );\n  };\n\n  return (\n    <>\n      <Header\n        changeCity={changeCityHandler}\n        showFavouritesPanel={showFavouritesPanelHandler}\n        showNotification={showNotificationHandler}\n      />\n      <WeatherInfo\n        weather={weather}\n        isFavourite={isFavourite}\n        toggleFavourite={toggleFavouriteHandler}\n      />\n      <Footer />\n      {loading && <Loading />}\n      {showNotification && (\n        <Notification\n          message={notificationMessage}\n          onClose={closeNotificationHandler}\n        />\n      )}\n      {showFavouritePanel && (\n        <Favourites\n          onClose={closeFavouritesPanelHandler}\n          favourites={favouriteCities}\n          onDelete={deleteFavouriteCityHandler}\n          changeCity={changeCityHandler}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/style.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}